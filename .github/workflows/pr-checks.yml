name: 🔍 Pull Request Checks

on:
  pull_request:
    branches:
      - main
      - master
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous runs if a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: registry.digitalocean.com/sln-prod-registry-01
  IMAGE_NAME: space-launch-now-base

jobs:
  # ========================================
  # 🔍 FAST LINTING (No Docker/Poetry overhead)
  # ========================================
  
  lint:
    name: 🔍 Fast Linting
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
        
      - name: 📦 Install Ruff
        run: |
          python -m pip install --upgrade pip
            pip install ruff==0.9.1
        
      - name: 🔍 Run Ruff Linting
        run: |
          echo "::group::🔍 Ruff Check"
          ruff check src/ --output-format=github
          echo "::endgroup::"
          
          echo "::group::🎨 Ruff Format Check"
          ruff format --check src/
          echo "::endgroup::"
        
      - name: 📊 Generate Lint Report
        if: always()
        run: |
          echo "::group::📊 Lint Summary"
          echo "Generating detailed lint report..."
          ruff check src/ --output-format=json > lint-report.json || true
          echo "::endgroup::"
        
      - name: 📤 Upload Lint Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: lint-report.json
          retention-days: 7

  # ========================================
  # 🏗️ BUILD ONCE (Reuse for tests and security)
  # ========================================
  
  build:
    name: 🏗️ Build Docker Image
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      image-name: ${{ steps.image.outputs.image-name }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🏗️ Build Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: test-image:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/test-image.tar
          build-args: |
            PRIVATE_USERNAME=${{ secrets.PRIVATE_USERNAME }}
            PRIVATE_PASSWORD=${{ secrets.PRIVATE_PASSWORD }}
            
      - name: 📤 Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: test-image
          path: /tmp/test-image.tar
          retention-days: 1
          
      - name: 🏷️ Set Image Name
        id: image
        run: echo "image-name=test-image:${{ github.sha }}" >> $GITHUB_OUTPUT

  # ========================================
  # 🧪 TESTS (Reuse built image)
  # ========================================
  
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event.pull_request.draft == false
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 📥 Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: test-image
          path: /tmp
          
      - name: 🔄 Load Docker Image
        run: |
          docker load --input /tmp/test-image.tar
          docker tag ${{ needs.build.outputs.image-name }} test-image:latest
        
      - name: 🧪 Run Tests
        run: |
          # Override the image in docker-compose to use our built image
          COMPOSE_FILE="docker/docker-compose.test.yml"
          
          # Create a temporary compose file with our built image
          cat > docker-compose.test.override.yml << EOF
          version: '3.8'
          services:
            test:
              image: test-image:latest
          EOF
          
          docker compose -f $COMPOSE_FILE -f docker-compose.test.override.yml run --rm test
          
      - name: 📊 Upload Coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: report/

  # ========================================
  # 🔒 SECURITY SCAN (Reuse built image)
  # ========================================
  
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event.pull_request.draft == false
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📥 Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: test-image
          path: /tmp
          
      - name: 🔄 Load Docker Image
        run: |
          docker load --input /tmp/test-image.tar
        
      - name: 🔍 Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-name }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📋 Upload Security Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 🔒 Run Bandit Security Scan (Source Code)
        run: |
          # Quick source code security scan without Poetry overhead
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt
        continue-on-error: true
        
      - name: 📤 Upload Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.json
          retention-days: 7

  # ========================================
  # 📋 QUALITY SUMMARY
  # ========================================
  
  quality-gate:
    name: 📋 Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: always() && github.event.pull_request.draft == false
    
    steps:
      - name: 📊 Check Quality Gate
        run: |
          echo "::group::📋 Quality Gate Results"
          
          LINT_STATUS="${{ needs.lint.result }}"
          TEST_STATUS="${{ needs.test.result }}"
          SECURITY_STATUS="${{ needs.security.result }}"
          
          echo "🔍 Linting: $LINT_STATUS"
          echo "🧪 Testing: $TEST_STATUS"
          echo "🔒 Security: $SECURITY_STATUS"
          
          # Determine overall status
          if [[ "$LINT_STATUS" == "success" && "$TEST_STATUS" == "success" && "$SECURITY_STATUS" == "success" ]]; then
            echo "✅ Quality gate PASSED - All checks successful!"
            echo "quality_gate=passed" >> $GITHUB_OUTPUT
          else
            echo "❌ Quality gate FAILED - Some checks failed"
            echo "quality_gate=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "::endgroup::"
        
      - name: 💬 Comment PR Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Find existing bot comment
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('🔍 Quality Check Results')
            );
            
            const lintStatus = '${{ needs.lint.result }}';
            const testStatus = '${{ needs.test.result }}';
            const securityStatus = '${{ needs.security.result }}';
            
            const getStatusIcon = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏸️';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };
            
            const body = `## 🔍 Quality Check Results
            
            | Check | Status | Result |
            |-------|--------|--------|
            | 🔍 **Linting** | ${getStatusIcon(lintStatus)} | ${lintStatus} |
            | 🧪 **Testing** | ${getStatusIcon(testStatus)} | ${testStatus} |
            | 🔒 **Security** | ${getStatusIcon(securityStatus)} | ${securityStatus} |
            
            ${lintStatus === 'success' && testStatus === 'success' && securityStatus === 'success'
              ? '🎉 **All quality checks passed!** This PR is ready for review.' 
              : '⚠️ **Some quality checks failed.** Please review the failed checks above.'}
            
            ---
            <sub>⚡ Optimized pipeline: Fast linting + single Docker build reused for tests & security</sub>
            <sub>Triggered by commit ${context.sha.substring(0, 7)} • [View Details](${context.payload.pull_request.html_url}/checks)</sub>`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # ========================================
  # 🚫 BLOCK MERGE ON FAILURE
  # ========================================
  
  block-merge:
    name: 🚫 Block Merge on Failure
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: failure()
    
    steps:
      - name: 🚫 Block Merge
        run: |
          echo "::error::Quality gate failed - blocking merge"
          echo "Please fix the failing checks before merging this PR"
          exit 1
