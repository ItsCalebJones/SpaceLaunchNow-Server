name: 🚀 Production Deployment

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy (e.g., main-1a2b3c4, master-5d6e7f8)'
        required: true
        type: string
      commit_sha:
        description: 'Commit SHA being deployed'
        required: true
        type: string
      confirm_deployment:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        type: string

env:
  REGISTRY: registry.digitalocean.com/sln-prod-registry-01
  IMAGE_NAME: space-launch-now-base

jobs:
  validate-inputs:
    name: 🔍 Validate Deployment Inputs
    runs-on: ubuntu-latest
    outputs:
      deploy-confirmed: ${{ steps.validate.outputs.deploy-confirmed }}
    steps:
      - name: 🔍 Validate Inputs
        id: validate
        run: |
          if [[ "${{ github.event.inputs.confirm_deployment }}" != "DEPLOY" ]]; then
            echo "❌ Deployment not confirmed. Please type 'DEPLOY' in the confirm_deployment field."
            exit 1
          fi
          
          if [[ -z "${{ github.event.inputs.image_tag }}" ]]; then
            echo "❌ Image tag is required"
            exit 1
          fi
          
          if [[ -z "${{ github.event.inputs.commit_sha }}" ]]; then
            echo "❌ Commit SHA is required"
            exit 1
          fi
          
          echo "✅ All inputs validated"
          echo "deploy-confirmed=true" >> $GITHUB_OUTPUT
          
      - name: 📊 Deployment Summary
        run: |
          echo "🚀 **Production Deployment Summary**"
          echo "- **Image Tag:** ${{ github.event.inputs.image_tag }}"
          echo "- **Commit SHA:** ${{ github.event.inputs.commit_sha }}"
          echo "- **Triggered by:** ${{ github.actor }}"
          echo "- **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    if: needs.validate-inputs.outputs.deploy-confirmed == 'true'
    environment: 
      name: production
      url: https://api.spacelaunchnow.app
    
    steps:
      - name: 📥 Checkout GitOps Repository
        uses: actions/checkout@v4
        with:
          repository: ItsCalebJones/SpaceLaunchNow-GitOps
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops
          
      - name: 🔍 Verify Image Exists
        run: |
          echo "🔍 Verifying image exists in registry..."
          
          # Install doctl to check if image exists
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.78.0/doctl-1.78.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin
          
          # Login to registry
          echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN_SLN }}" | doctl auth init --context production -t -
          doctl registry login --expiry-seconds 600
          
          # Check if the image exists
          FULL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
          echo "🔍 Checking for image: $FULL_IMAGE"
          
          if docker manifest inspect "$FULL_IMAGE" > /dev/null 2>&1; then
            echo "✅ Image exists and is accessible"
          else
            echo "❌ Image not found or not accessible: $FULL_IMAGE"
            echo "Please verify the image tag is correct and the image was built successfully"
            exit 1
          fi
          
      - name: 🔄 Update Image Tag in Production Values
        run: |          
          echo "🚀 Deploying to production with image tag: ${{ github.event.inputs.image_tag }}"
          
          # Update the Helm values file in GitOps repo
          cd gitops/manifests/apps/production
          
          # Show current tag before update
          echo "📋 Current image tag:"
          grep "tag:" values-production.yaml
          
          # Update the tag
          sed -i "s|tag:.*|tag: ${{ github.event.inputs.image_tag }}|" values-production.yaml
          
          # Show updated tag
          echo "📋 Updated image tag:"
          grep "tag:" values-production.yaml
          
      - name: 📤 Commit Changes to GitOps Repository
        run: |
          cd gitops
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (Production Deploy)"
          git config --local pull.rebase true
          
          # Check if there are any changes to commit
          if git diff --quiet; then
            echo "ℹ️ No changes detected - image tag may already be current"
            exit 0
          fi
          
          git add manifests/apps/production/values-production.yaml
          git commit -m "🚀 Deploy ${{ github.event.inputs.commit_sha }} to production (approved by ${{ github.actor }})"

          # Pull latest changes and push with retry logic
          for i in {1..3}; do
            if git pull --rebase origin main && git push; then
              echo "✅ Successfully pushed production deployment to GitOps repo on attempt $i"
              break
            else
              echo "⚠️ Push failed on attempt $i, retrying..."
              sleep 2
            fi
            
            if [[ $i -eq 3 ]]; then
              echo "❌ Failed to push after 3 attempts"
              exit 1
            fi
          done
          
      - name: ⏱️ Wait for ArgoCD Sync
        run: |
          echo "⏱️ Waiting 30 seconds for ArgoCD to detect changes..."
          sleep 30
          
      - name: 📢 Notify Production Deployment
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🎉 **Production Deployment Complete**
            
            **Image Tag:** ${{ github.event.inputs.image_tag }}
            **Commit:** ${{ github.event.inputs.commit_sha }}
            **Approved by:** ${{ github.actor }}
            **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            
            🔗 **Production URL:** https://api.spacelaunchnow.app
            🔗 **ArgoCD:** https://argo.spacelaunchnow.app
            
            ⏳ **Please monitor ArgoCD for sync completion**

  post-deployment:
    name: 📊 Post-Deployment Checks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
      - name: 🔍 Health Check
        run: |
          echo "🏥 Performing basic health check..."
          
          # Wait a bit for deployment to propagate
          sleep 60
          
          # Check if the health endpoint responds
          HEALTH_URL="https://api.spacelaunchnow.app/_health/"
          
          for i in {1..5}; do
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "⚠️ Health check failed on attempt $i, retrying in 30s..."
              sleep 30
            fi
            
            if [[ $i -eq 5 ]]; then
              echo "❌ Health check failed after 5 attempts"
              echo "🔍 Please manually verify the deployment in ArgoCD"
            fi
          done
          
      - name: 📢 Notify Health Check Result
        if: always()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            📊 **Production Health Check Complete**
            
            **Status:** ${{ job.status == 'success' && '✅ Healthy' || '⚠️ Needs attention' }}
            **Image Tag:** ${{ github.event.inputs.image_tag }}
            **Commit:** ${{ github.event.inputs.commit_sha }}
            
            ${{ job.status != 'success' && '🔍 Please check ArgoCD and application logs' || '🎉 Production deployment successful and healthy!' }}
