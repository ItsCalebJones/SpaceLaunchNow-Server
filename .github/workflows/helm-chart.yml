name: 📦 Helm Chart Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - package
          - publish
          - validate
      chart-version:
        description: 'Chart version (optional - will auto-generate if not provided)'
        required: false
        type: string

env:
  CHART_PATH: k8s/helm

jobs:
  package-chart:
    name: 📦 Package Helm Chart
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'package' || github.event.inputs.action == 'publish'
    outputs:
      chart-version: ${{ steps.version.outputs.chart-version }}
      package-path: ${{ steps.package.outputs.package-path }}
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.14.0'
          
      - name: 📦 Generate Chart Version
        id: version
        run: |
          if [[ -n "${{ github.event.inputs.chart-version }}" ]]; then
            CHART_VERSION="${{ github.event.inputs.chart-version }}"
          else
            CHART_VERSION="$(date +%Y.%m.%d).${GITHUB_RUN_NUMBER}"
          fi
          
          echo "Using chart version: $CHART_VERSION"
          echo "chart-version=$CHART_VERSION" >> $GITHUB_OUTPUT
          
          # Update Chart.yaml
          sed -i "s/^version:.*/version: $CHART_VERSION/" ${{ env.CHART_PATH }}/Chart.yaml
          
      - name: 🔍 Validate Chart
        run: |
          helm lint ${{ env.CHART_PATH }}
          helm template test ${{ env.CHART_PATH }} --debug --dry-run
          
      - name: 📦 Package Chart
        id: package
        run: |
          helm dependency update ${{ env.CHART_PATH }}
          helm package ${{ env.CHART_PATH }} --destination ./charts/
          
          PACKAGE_FILE=$(ls ./charts/*.tgz | head -1)
          echo "package-path=$PACKAGE_FILE" >> $GITHUB_OUTPUT
          echo "Packaged chart: $PACKAGE_FILE"
          
      - name: 📤 Upload Chart Artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-${{ steps.version.outputs.chart-version }}
          path: ./charts/*.tgz

  publish-chart:
    name: 🚀 Publish Helm Chart
    runs-on: ubuntu-latest
    needs: [package-chart]
    if: github.event.inputs.action == 'publish'
    
    steps:
      - name: 📥 Download Chart Artifact
        uses: actions/download-artifact@v4
        with:
          name: helm-chart-${{ needs.package-chart.outputs.chart-version }}
          path: ./charts/
          
      - name: 🚀 Publish to Chart Repository
        run: |
          echo "📦 Publishing chart version: ${{ needs.package-chart.outputs.chart-version }}"
          echo "🚀 This step would upload to your chart repository"
          echo "   Examples:"
          echo "   - ChartMuseum"
          echo "   - Harbor Registry"
          echo "   - GitHub Packages"
          echo "   - OCI Registry"
          
          # Example for GitHub Packages (OCI)
          # helm push ./charts/*.tgz oci://ghcr.io/thespacedevs/charts
          
  validate-chart:
    name: 🔍 Validate Helm Chart
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'validate'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.14.0'
          
      - name: 📦 Update Dependencies
        run: |
          helm dependency update ${{ env.CHART_PATH }}
          
      - name: 🔍 Lint Chart
        run: |
          helm lint ${{ env.CHART_PATH }}
          
      - name: 🧪 Test Chart Templates
        run: |
          echo "🧪 Testing chart templates..."
          
          # Test with staging values
          helm template test-staging ${{ env.CHART_PATH }} \
            --values ${{ env.CHART_PATH }}/values-staging.yaml \
            --debug --dry-run
            
          # Test with production values
          helm template test-production ${{ env.CHART_PATH }} \
            --values ${{ env.CHART_PATH }}/values-prod.yaml \
            --debug --dry-run
            
      - name: 🔐 Security Scan Chart
        run: |
          echo "🔐 Security scanning chart templates..."
          # You could add tools like:
          # - Checkov for Kubernetes security
          # - Kubesec for security analysis
          # - Polaris for best practices
          
          # Example with a simple check
          if grep -r "hostNetwork: true" ${{ env.CHART_PATH }}/templates/; then
            echo "❌ Security issue: hostNetwork found in templates"
            exit 1
          fi
          
          echo "✅ Basic security checks passed"
          
  notify:
    name: 📢 Notify Chart Operation
    runs-on: ubuntu-latest
    needs: [package-chart, publish-chart, validate-chart]
    if: always()
    
    steps:
      - name: 📢 Discord Notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            📦 **Helm Chart Operation Complete**
            
            **Action:** ${{ github.event.inputs.action }}
            **Chart Version:** ${{ needs.package-chart.outputs.chart-version || 'N/A' }}
            **Status:** ${{ job.status }}
            **Triggered by:** ${{ github.actor }}
            
            🔗 **Workflow:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
