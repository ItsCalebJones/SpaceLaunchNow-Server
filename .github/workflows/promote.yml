name: üéØ Promote to Production

on:
  workflow_dispatch:
    inputs:
      staging_tag:
        description: 'Staging tag to promote (e.g., develop-abc123)'
        required: true
        type: string
      release_version:
        description: 'Release version (e.g., v2024.01.15)'
        required: false
        type: string

env:
  REGISTRY: registry.digitalocean.com/sln-prod-registry-01
  IMAGE_NAME: space-launch-now-base

jobs:
  validate:
    name: üîç Validate Staging Image
    runs-on: ubuntu-latest
    outputs:
      staging-tag: ${{ github.event.inputs.staging_tag }}
      release-version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: üîß Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN_SLN }}
          
      - name: üîê Login to Registry
        run: doctl registry login --expiry-seconds 3600
        
      - name: üîç Validate Staging Image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.staging_tag }}"
          echo "üîç Validating staging image: $IMAGE"
          
          if ! docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
            echo "‚ùå Staging image does not exist: $IMAGE"
            exit 1
          fi
          
          echo "‚úÖ Staging image validated"
          
      - name: üè∑Ô∏è Generate Release Version
        id: version
        run: |
          if [[ -n "${{ github.event.inputs.release_version }}" ]]; then
            VERSION="${{ github.event.inputs.release_version }}"
          else
            # Generate version based on date
            VERSION="v$(date +%Y.%m.%d)-$(date +%H%M)"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Release version: $VERSION"

  promote:
    name: üöÄ Promote Image
    runs-on: ubuntu-latest
    needs: [validate]
    environment: production
    
    steps:
      - name:  Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN_SLN }}
          
      - name: üîê Login to Registry
        run: doctl registry login --expiry-seconds 3600
        
      - name: üè∑Ô∏è Tag Production Image
        run: |
          STAGING_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.staging-tag }}"
          PROD_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.release-version }}"
          LATEST_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production"
          
          echo "üì¶ Pulling staging image: $STAGING_IMAGE"
          docker pull "$STAGING_IMAGE"
          
          echo "üè∑Ô∏è Tagging as: $PROD_IMAGE"
          docker tag "$STAGING_IMAGE" "$PROD_IMAGE"
          
          echo "üè∑Ô∏è Tagging as: $LATEST_IMAGE"
          docker tag "$STAGING_IMAGE" "$LATEST_IMAGE"
          
          echo "üì§ Pushing production tags..."
          docker push "$PROD_IMAGE"
          docker push "$LATEST_IMAGE"
          
      - name: ÔøΩ Checkout GitOps Repository
        uses: actions/checkout@v4
        with:
          repository: ItsCalebJones/SpaceLaunchNow-GitOps
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops
          
      - name: ÔøΩüîÑ Update Production Manifests
        run: |
          echo "üöÄ Promoting to production with image tag: ${{ needs.validate.outputs.release-version }}"
          
          # Update the Helm values file in GitOps repo
          cd gitops/manifests/apps/production
          
          # Show current tag before update
          echo "üìã Current image tag:"
          grep "tag:" values-production.yaml
          
          # Update the tag to use the new release version
          sed -i "s|tag:.*|tag: ${{ needs.validate.outputs.release-version }}|" values-production.yaml
          
          # Show updated tag
          echo "üìã Updated image tag:"
          grep "tag:" values-production.yaml
          
      - name: üì§ Commit Changes to GitOps Repository
        run: |
          cd gitops
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (Production Promote)"
          git config --local pull.rebase true
          
          # Check if there are any changes to commit
          if git diff --quiet; then
            echo "‚ÑπÔ∏è No changes detected - image tag may already be current"
            exit 0
          fi
          
          git add manifests/apps/production/values-production.yaml
          git commit -m "üöÄ Promote ${{ needs.validate.outputs.staging-tag }} to production as ${{ needs.validate.outputs.release-version }}"

          # Pull latest changes and push with retry logic
          for i in {1..3}; do
            if git pull --rebase origin main && git push; then
              echo "‚úÖ Successfully pushed production promotion to GitOps repo on attempt $i"
              break
            else
              echo "‚ö†Ô∏è Push failed on attempt $i, retrying..."
              sleep 2
            fi
            
            if [[ $i -eq 3 ]]; then
              echo "‚ùå Failed to push after 3 attempts"
              exit 1
            fi
          done

  notify:
    name: üì¢ Notify Success
    runs-on: ubuntu-latest
    needs: [promote, validate]
    if: success()
    
    steps:
      - name: üì¢ Discord Notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            üéâ **Production Promotion Successful!**
            
            **Staging Tag:** ${{ needs.validate.outputs.staging-tag }}
            **Production Version:** ${{ needs.validate.outputs.release-version }}
            **Promoted by:** ${{ github.actor }}
            
            üîó **ArgoCD:** https://argo.spacelaunchnow.app
