name: 🚀 CI/CD Pipeline

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  release:
    types: [published]

env:
  REGISTRY: registry.digitalocean.com/sln-prod-registry-01
  IMAGE_NAME: space-launch-now-base

jobs:
  # ========================================
  # 🔍 FAST LINTING (No Docker/Poetry overhead)
  # ========================================
  
  lint:
    name: 🔍 Fast Linting
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: � Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
        
      - name: 📦 Install Ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff
        
      - name: � Run Ruff Linting
        run: |
          echo "::group::🔍 Ruff Check"
          ruff check src/ --output-format=github
          echo "::endgroup::"
          
          echo "::group::🎨 Ruff Format Check"
          ruff format --check src/
          echo "::endgroup::"

  # ========================================
  # 🏗️ BUILD ONCE (Reuse for tests and security)
  # ========================================
  
  build-base:
    name: 🏗️ Build Base Image
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.image.outputs.image-name }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: � Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🏗️ Build Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: base-image:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/base-image.tar
          secrets: |
            private_username=${{ secrets.PRIVATE_USERNAME }}
            private_password=${{ secrets.PRIVATE_PASSWORD }}
            
      - name: � Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: base-image
          path: /tmp/base-image.tar
          retention-days: 1
          
      - name: 🏷️ Set Image Name
        id: image
        run: echo "image-name=base-image:${{ github.sha }}" >> $GITHUB_OUTPUT

  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: [build-base]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: � Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 📥 Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: base-image
          path: /tmp
          
      - name: � Load Docker Image
        run: |
          docker load --input /tmp/base-image.tar
          docker tag ${{ needs.build-base.outputs.image-name }} test-image:latest
        
      - name: 🧪 Run Tests
        run: |
          # Start database in background
          docker run -d --name test-db \
            -e POSTGRES_DB=postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            postgres:14-alpine
          
          # Wait for database to be ready
          sleep 10
          
          # Run tests using our pre-built image
          docker run --rm \
            --link test-db:db \
            -v "$(pwd)/report/coverage/:/code/coverage/" \
            -v "$(pwd)/report/htmlcov/:/code/htmlcov/" \
            -v "$(pwd)/report/xmlrunner/:/code/xmlrunner/" \
            -e DEBUG=true \
            -e DJANGO_SECRET_KEY=${{ secrets.PRIVATE_PASSWORD }} \
            -e DATABASE_NAME=postgres \
            -e DATABASE_USERNAME=postgres \
            -e DATABASE_PASSWORD=postgres \
            -e DATABASE_ENGINE=django.db.backends.postgresql \
            -e DATABASE_HOST=db \
            -e DATABASE_PORT=5432 \
            -e USE_LOCAL_STORAGE=true \
            test-image:latest \
            bash -c "coverage run --data-file=/code/coverage/.coverage manage.py test --settings=spacelaunchnow.settings.test && coverage html --data-file=/code/coverage/.coverage && coverage report --data-file=/code/coverage/.coverage"
          
          # Clean up database
          docker stop test-db && docker rm test-db
          
      - name: 📊 Upload Coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: report/

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [build-base]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 📥 Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: base-image
          path: /tmp
          
      - name: 🔄 Load Docker Image
        run: |
          docker load --input /tmp/base-image.tar
        
      - name: 🔍 Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-base.outputs.image-name }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📋 Upload Security Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ========================================
  # 📦 SEMANTIC RELEASE (MAIN BRANCH ONLY)
  # ========================================
  
  semantic-release:
    name: 📦 Create Semantic Release
    runs-on: ubuntu-latest
    needs: [test, security-scan, lint]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]')
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.tag }}
      clean-version: ${{ steps.clean-version.outputs.clean-version }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}
          
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        
      - name: 📦 Python Semantic Release
        uses: python-semantic-release/python-semantic-release@v9.8.6
        id: release
        with:
          github_token: ${{ github.token }}

      - name: 🧹 Extract Clean Version
        id: clean-version
        run: |
          if [[ "${{ steps.release.outputs.released }}" == "true" ]]; then
            CLEAN_VERSION="${{ steps.release.outputs.tag }}"
            # Remove 'v' prefix if present
            CLEAN_VERSION="${CLEAN_VERSION#v}"
            echo "clean-version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
            echo "Semantic release created version: $CLEAN_VERSION"
          else
            # No release, use current pyproject.toml version (only from [tool.poetry] section)
            POETRY_VERSION=$(awk '/^\[tool\.poetry\]/{flag=1} flag && /^version = /{print $3; exit}' pyproject.toml | tr -d '"')
            echo "clean-version=$POETRY_VERSION" >> $GITHUB_OUTPUT
            echo "No release created, using current version: $POETRY_VERSION"
          fi

      - name: 📤 Publish package distributions to GitHub Releases
        uses: python-semantic-release/upload-to-gh-release@v9.8.6
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ github.token }}
          tag: ${{ steps.release.outputs.tag }}
          
      - name: 📢 Notify Release Created
        if: steps.release.outputs.released == 'true'
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🎉 **New Release Created**
            
            **Version:** ${{ steps.release.outputs.tag }}
            **Branch:** main
            **Commit:** ${{github.sha}}
            
            📝 **Changelog:** ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.release.outputs.tag }}
            ⏳ **Building container with updated version...**
          

  # ========================================
  # 🏗️ BUILD & PUSH
  # ========================================
  
  build:
    name: 🏗️ Build & Push
    runs-on: ubuntu-latest
    needs: [test, security-scan, lint, build-base]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && !contains(github.event.head_commit.message, '[skip ci]')
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔧 Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN_SLN }}
          
      - name: 🔐 Login to Registry
        run: doctl registry login --expiry-seconds 3600
        
      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 📥 Download Base Image
        uses: actions/download-artifact@v4
        with:
          name: base-image
          path: /tmp
          
      - name: 🔄 Load Base Image
        run: |
          docker load --input /tmp/base-image.tar
        
      - name: 🏷️ Generate Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 🏗️ Tag and Push
        id: build
        run: |
          # Tag the built image with registry tags
          FIRST_TAG=""
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' ' '); do
            echo "🏷️ Tagging: $tag"
            docker tag ${{ needs.build-base.outputs.image-name }} $tag
            docker push $tag
            if [ -z "$FIRST_TAG" ]; then
              FIRST_TAG=$tag
            fi
          done
          
          # Get the digest from the pushed image using docker manifest
          if [ -n "$FIRST_TAG" ]; then
            # Try to get digest using docker buildx imagetools (extract just the digest part)
            DIGEST=$(docker buildx imagetools inspect $FIRST_TAG --format '{{.Manifest.Digest}}' 2>/dev/null | grep -o 'sha256:[a-f0-9]*' || echo "")
            
            if [ -z "$DIGEST" ]; then
              # Fallback method: try to get digest from docker inspect
              REPO_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $FIRST_TAG 2>/dev/null || echo "")
              if [[ "$REPO_DIGEST" == *"@"* ]]; then
                DIGEST=$(echo "$REPO_DIGEST" | cut -d'@' -f2)
              else
                DIGEST="unknown"
              fi
            fi
            
            echo "📦 Image digest: $DIGEST"
            echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No tags found, setting digest to unknown"
            echo "digest=unknown" >> $GITHUB_OUTPUT
          fi

  # ========================================
  # 🚀 DEPLOYMENT
  # ========================================
  
  deploy-staging:
    name: 🚀 Auto-Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📥 Checkout GitOps Repository
        uses: actions/checkout@v4
        with:
          repository: ItsCalebJones/SpaceLaunchNow-GitOps
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops
          
      - name: 🔄 Update Image Tag
        run: |
          # Extract the sha-based tag (works for both main and master branches)
          IMAGE_TAG=$(echo '${{ needs.build.outputs.image-tag }}' | grep -E '(main-|master-)' | head -1)
          
          echo "🏷️ Updating staging to image: ${IMAGE_TAG##*:}"
          
          # Update the Helm values file in GitOps repo
          cd gitops/manifests/apps/staging
          sed -i "s|tag:.*|tag: ${IMAGE_TAG##*:}|" values-staging.yaml
          
      - name: 📤 Commit Changes to GitOps Repository
        run: |
          cd gitops
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (Staging Deploy)"
          git config --local pull.rebase true
          
          git add manifests/apps/staging/values-staging.yaml
          git commit -m "🚀 Deploy ${GITHUB_SHA::8} to staging" || exit 0
          
          # Pull latest changes and push with retry logic
          for i in {1..3}; do
            if git pull --rebase origin main && git push; then
              echo "✅ Successfully pushed staging deployment to GitOps repo on attempt $i"
              break
            else
              echo "⚠️ Push failed on attempt $i, retrying..."
              sleep 2
            fi
          done
          
      - name: 📢 Notify Staging Deployment
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🚀 **Staging Deployment Complete**
            
            **Branch:** main
            **Commit:** ${GITHUB_SHA::8}
            **Image:** ${IMAGE_TAG##*:}
            **App Version:** ${{ needs.update-app-version.outputs.app-version }}
            
            🔗 **Staging URL:** https://staging.spacelaunchnow.app
            🔗 **ArgoCD:** https://argo.spacelaunchnow.app

  prepare-production:
    name: 🎯 Prepare Production Release
    runs-on: ubuntu-latest
    needs: [deploy-staging, build]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name == 'push'
    
    steps:
      - name: � Extract Image Tag
        id: image-info
        run: |
          # Extract the sha-based tag (works for both main and master branches)
          IMAGE_TAG=$(echo '${{ needs.build.outputs.image-tag }}' | grep -E '(main-|master-)' | head -1)
          IMAGE_TAG_CLEAN=${IMAGE_TAG##*:}
          
          echo "image-tag=$IMAGE_TAG_CLEAN" >> $GITHUB_OUTPUT
          echo "🏷️ Production-ready image tag: $IMAGE_TAG_CLEAN"
        
      - name: �📢 Notify Production Ready
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🎯 **Production Release Ready for Manual Deployment**
            
            **Branch:** main
            **Commit:** ${{ github.sha }}
            **Short Commit:** ${GITHUB_SHA::8}
            **Author:** ${{ github.event.head_commit.author.name }}
            **Message:** ${{ github.event.head_commit.message }}
            **Image Tag:** ${{ steps.image-info.outputs.image-tag }}
            
            ✅ Tests passed
            🔒 Security scan completed
            🏗️ Image built and ready
            🚀 Staging deployment successful
            
            🎯 **To deploy to production:**
            1. Go to GitHub Actions → "🎯 Promote to Production" workflow
            2. Click "Run workflow"
            3. Enter image tag: `${{ steps.image-info.outputs.image-tag }}`
            4. Enter commit SHA: `${{ github.sha }}`
            5. Type "DEPLOY" to confirm
            
            🔗 **Deploy:** ${{ github.server_url }}/${{ github.repository }}/actions/workflows/promote.yml
            🔗 **Build Log** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}


