name: 🔄 Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  POETRY_HTTP_BASIC_TSD_USERNAME: ${{ secrets.PRIVATE_USERNAME }}
  POETRY_HTTP_BASIC_TSD_PASSWORD: ${{ secrets.PRIVATE_PASSWORD }}

jobs:
  update-dependencies:
    name: 🔄 Update Python Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🐍 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
          
      - name: 🔄 Update Dependencies
        run: |
          # Update poetry.lock file with latest compatible versions
          docker run --rm \
            -v "$(pwd):/workspace" \
            -w /workspace \
            -e POETRY_HTTP_BASIC_TSD_USERNAME=${{ secrets.PRIVATE_USERNAME }} \
            -e POETRY_HTTP_BASIC_TSD_PASSWORD=${{ secrets.PRIVATE_PASSWORD }} \
            python:3.12-alpine sh -c "
              pip install poetry &&
              poetry config repositories.tsd https://pypi.thespacedevs.com/simple/ &&
              poetry config http-basic.tsd \$POETRY_HTTP_BASIC_TSD_USERNAME \$POETRY_HTTP_BASIC_TSD_PASSWORD &&
              poetry update
            "
          
      - name: 🔍 Debug Secrets (without exposing values)
        run: |
          echo "Checking if secrets are available..."
          if [ -z "${{ secrets.PRIVATE_USERNAME }}" ]; then
            echo "❌ PRIVATE_USERNAME secret is not set"
            echo "   This is REQUIRED for django-launch-library dependency"
            exit 1
          else
            echo "✅ PRIVATE_USERNAME secret is available"
          fi
          if [ -z "${{ secrets.PRIVATE_PASSWORD }}" ]; then
            echo "❌ PRIVATE_PASSWORD secret is not set"
            echo "   This is REQUIRED for django-launch-library dependency"
            exit 1
          else
            echo "✅ PRIVATE_PASSWORD secret is available"
          fi
          
      - name: 🏗️ Build Docker Image for Testing
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: test-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          secrets: |
            "private_username=${{ secrets.PRIVATE_USERNAME }}"
            "private_password=${{ secrets.PRIVATE_PASSWORD }}"
      
      - name: 🔍 Verify Docker Image Built Successfully
        run: |
          echo "Checking if test-image:latest was built successfully..."
          docker images test-image:latest
          if ! docker image inspect test-image:latest > /dev/null 2>&1; then
            echo "❌ ERROR: test-image:latest was not built successfully"
            echo "Available images:"
            docker images
            exit 1
          fi
          echo "✅ test-image:latest built successfully"
        
      - name: 🧪 Run Tests with Updated Dependencies
        run: |
          # Start database in background
          docker run -d --name test-db \
            -e POSTGRES_DB=postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            postgres:14-alpine
          
          # Wait for database to be ready
          echo "⏳ Waiting for database to be ready..."
          sleep 10
          
          # Verify database is accessible
          if ! docker exec test-db pg_isready -U postgres; then
            echo "❌ Database is not ready"
            docker logs test-db
            exit 1
          fi
          echo "✅ Database is ready"
          
          # Run tests using our updated image
          echo "🧪 Running tests..."
          docker run --rm \
            --link test-db:db \
            -v "$(pwd)/report/coverage/:/code/coverage/" \
            -v "$(pwd)/report/htmlcov/:/code/htmlcov/" \
            -v "$(pwd)/report/xmlrunner/:/code/xmlrunner/" \
            -e DEBUG=true \
            -e DJANGO_SECRET_KEY=${{ secrets.PRIVATE_PASSWORD }} \
            -e DATABASE_NAME=postgres \
            -e DATABASE_USERNAME=postgres \
            -e DATABASE_PASSWORD=postgres \
            -e DATABASE_ENGINE=django.db.backends.postgresql \
            -e DATABASE_HOST=db \
            -e DATABASE_PORT=5432 \
            -e USE_LOCAL_STORAGE=true \
            test-image:latest \
            bash -c "coverage run --data-file=/code/coverage/.coverage manage.py test --settings=spacelaunchnow.settings.test && coverage html --data-file=/code/coverage/.coverage && coverage report --data-file=/code/coverage/.coverage"
          
          # Clean up database (always run, even if tests fail)
          echo "🧹 Cleaning up..."
          docker stop test-db && docker rm test-db || true
          
      - name: 📋 Generate Update Summary
        run: |
          # Compare lock files to see what changed
          git diff --name-only
          
          if git diff --quiet poetry.lock; then
            echo "No dependency updates available"
            echo "UPDATES_AVAILABLE=false" >> $GITHUB_ENV
          else
            echo "Dependencies updated"
            echo "UPDATES_AVAILABLE=true" >> $GITHUB_ENV
            
            # Generate summary of changes
            git diff poetry.lock > dependency-changes.diff
          fi
          
      - name: 📤 Create Pull Request
        if: env.UPDATES_AVAILABLE == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🔄 Update Python dependencies
            
            Automated dependency update via scheduled workflow.
          title: '🔄 Weekly Dependency Updates'
          body: |
            ## 🔄 Automated Dependency Updates
            
            This PR contains automated updates to Python dependencies.
            
            ### ✅ Automated Checks Passed:
            - Unit tests
            - Security scan
            - Lock file validation
            
            ### 📋 Review Checklist:
            - [ ] Review changelog for breaking changes
            - [ ] Test staging deployment
            - [ ] Monitor application logs
            
            **Generated by:** Weekly dependency update workflow
            **Timestamp:** ${{ github.run_started_at }}
          branch: automated/dependency-updates
          delete-branch: true
          
      - name: 📢 Notify on Discord
        if: env.UPDATES_AVAILABLE == 'true'
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🔄 **Dependency Updates Available**
            
            New PR created with updated Python dependencies.
            Please review and merge if tests pass.
            
            🔗 **Link:** ${{ github.server_url }}/${{ github.repository }}/pulls
