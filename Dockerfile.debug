# Development Dockerfile with detailed debugging
# Use this for testing TSD repository access issues

FROM python:3.12.10-alpine AS builder

ARG PRIVATE_USERNAME
ARG PRIVATE_PASSWORD
ENV POETRY_HTTP_BASIC_TSD_USERNAME=$PRIVATE_USERNAME
ENV POETRY_HTTP_BASIC_TSD_PASSWORD=$PRIVATE_PASSWORD

ENV PYTHONUNBUFFERED=1
ENV DOCKER_CONTAINER=1
ENV POETRY_CACHE_DIR='/var/cache/pypoetry'
ENV POETRY_HOME='/usr/local'
ENV PATH="/usr/local/bin:$PATH"

WORKDIR /code/
COPY pyproject.toml poetry.lock README.md /code/

# Install system dependencies
RUN apk add --no-cache curl bash

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3 - --version 2.1.2

# Verify Poetry installation
RUN export PATH="/usr/local/bin:$PATH" && poetry --version

# Configure Poetry
RUN export PATH="/usr/local/bin:$PATH" && \
    poetry config virtualenvs.in-project true

# Debug: Show environment variables (without sensitive data)
RUN echo "Environment check:" && \
    echo "USERNAME length: ${#PRIVATE_USERNAME}" && \
    echo "PASSWORD length: ${#PRIVATE_PASSWORD}" && \
    echo "Username starts with: ${PRIVATE_USERNAME:0:3}..." && \
    if [ -z "$PRIVATE_USERNAME" ]; then echo "ERROR: USERNAME is empty"; fi && \
    if [ -z "$PRIVATE_PASSWORD" ]; then echo "ERROR: PASSWORD is empty"; fi

# Test basic connectivity
RUN echo "Testing TSD repository connectivity..." && \
    curl -f https://pypi.thespacedevs.com/simple/ && \
    echo "Basic connectivity successful"

# Test authenticated access
RUN echo "Testing authenticated access..." && \
    curl -u "$PRIVATE_USERNAME:$PRIVATE_PASSWORD" -f \
    https://pypi.thespacedevs.com/simple/django-launch-library/ && \
    echo "Authenticated access successful"

# Configure Poetry authentication
RUN export PATH="/usr/local/bin:$PATH" && \
    poetry config http-basic.tsd "$PRIVATE_USERNAME" "$PRIVATE_PASSWORD" && \
    echo "Poetry authentication configured"

# Verify Poetry configuration
RUN export PATH="/usr/local/bin:$PATH" && \
    poetry config --list | grep tsd && \
    echo "Poetry TSD configuration verified"

# Show pyproject.toml TSD configuration
RUN echo "Checking pyproject.toml TSD source configuration:" && \
    grep -A 3 "tool.poetry.source" pyproject.toml

# Attempt to install dependencies with verbose output
RUN export PATH="/usr/local/bin:$PATH" && \
    echo "Starting dependency installation..." && \
    poetry install --no-interaction --no-root --no-ansi --with ci -vvv

FROM python:3.12.10-alpine

WORKDIR /code/
COPY --from=builder /usr/bin/curl /usr/bin/curl
COPY --from=builder /bin/bash /bin/bash
COPY --from=builder /code /code

COPY src/ /code/
ENV PATH="/code/.venv/bin:$PATH"

EXPOSE 8000
