---
- name: Deploy SLN Kubernetes Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    # Default values - can be overridden via extra vars
    cloudflare_api_token: "{{ cloudflare_api_token | default('') }}"
    cert_manager_version: "v1.5.5"
    
    # Helm repositories
    helm_repos:
      - name: jetstack
        url: https://charts.jetstack.io
      - name: bitnami
        url: https://charts.bitnami.com/bitnami
      - name: ingress-nginx
        url: https://kubernetes.github.io/ingress-nginx
      - name: prometheus-community
        url: https://prometheus-community.github.io/helm-charts
      - name: uptime-kuma
        url: https://helm.irsigler.cloud
      - name: external-secrets
        url: https://charts.external-secrets.io
      - name: hashicorp
        url: https://helm.releases.hashicorp.com
      - name: argo
        url: https://argoproj.github.io/argo-helm

  pre_tasks:
    - name: Check required variables
      fail:
        msg: "cloudflare_api_token extra variable is required. Use: ansible-playbook deploy-sln.yml -e cloudflare_api_token=YOUR_TOKEN"
      when: cloudflare_api_token == ""

    - name: Check kubectl is available
      command: kubectl version --client
      register: kubectl_check
      failed_when: false
      changed_when: false

    - name: Check helm is available
      command: helm version
      register: helm_check
      failed_when: false
      changed_when: false

    - name: Fail if dependencies are missing
      fail:
        msg: "Required tools are missing. Please install kubectl and helm."
      when: kubectl_check.rc != 0 or helm_check.rc != 0

  tasks:
    # Step 1: Add Helm repositories
    - name: Add helm repositories
      kubernetes.core.helm_repository:
        name: "{{ item.name }}"
        repo_url: "{{ item.url }}"
      loop: "{{ helm_repos }}"
      tags: helm_repos

    - name: Update helm repositories
      command: helm repo update
      changed_when: true
      tags: helm_repos

    # Step 2: Install cert-manager
    - name: Install cert-manager
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        chart_version: "{{ cert_manager_version }}"
        release_namespace: cert-manager
        create_namespace: true
        values:
          installCRDs: true
        wait: true
        wait_timeout: 600s
      tags: cert_manager

    # Step 2.1: Install HashiCorp Vault
    - name: Install HashiCorp Vault
      kubernetes.core.helm:
        name: vault
        chart_ref: hashicorp/vault
        release_namespace: vault
        create_namespace: true
        values:
          server:
            dev:
              enabled: true
              devRootToken: "root"
            dataStorage:
              enabled: false
            resources:
              requests:
                memory: 256Mi
                cpu: 250m
              limits:
                memory: 512Mi
                cpu: 500m
          ui:
            enabled: true
            serviceType: ClusterIP
          injector:
            enabled: false
        wait: true
        wait_timeout: 600s
      tags: vault

    # Step 2.2: Install External Secrets Operator
    - name: Install External Secrets Operator
      kubernetes.core.helm:
        name: external-secrets
        chart_ref: external-secrets/external-secrets
        release_namespace: external-secrets-system
        create_namespace: true
        values:
          installCRDs: true
          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 256Mi
              cpu: 200m
        wait: true
        wait_timeout: 600s
      tags: external_secrets

    # Step 2.3: Install ArgoCD
    - name: Install ArgoCD
      kubernetes.core.helm:
        name: argocd
        chart_ref: argo/argo-cd
        release_namespace: argocd
        create_namespace: true
        values_files:
          - argocd/values.yaml
        wait: true
        wait_timeout: 900s
      tags: argocd

    # Step 3: Install nginx-ingress
    - name: Install nginx-ingress
      kubernetes.core.helm:
        name: nginx-ingress
        chart_ref: ingress-nginx/ingress-nginx
        release_namespace: nginx-ingress
        create_namespace: true
        values:
          controller:
            metrics:
              enabled: true
            publishService:
              enabled: true
            podAnnotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "10254"
            config:
              use-forwarded-headers: "true"
              log-format-upstream: '$http_x_forwarded_for $remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" $request_length $request_time [$proxy_upstream_name] [$proxy_alternative_upstream_name] $upstream_addr $upstream_response_length $upstream_response_time $upstream_status $req_id'
            resources:
              requests:
                memory: 256Mi
        wait: true
        wait_timeout: 600s
      tags: nginx_ingress

    - name: Wait for nginx-ingress controller to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: nginx-ingress
        label_selectors:
          - app.kubernetes.io/component=controller
          - app.kubernetes.io/name=ingress-nginx
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 300
      tags: nginx_ingress

    # Step 4: Add LoadBalancer name annotation (this step is manual in README)
    - name: Add LoadBalancer name annotation to nginx service
      kubernetes.core.k8s:
        api_version: v1
        kind: Service
        name: nginx-ingress-ingress-nginx-controller
        namespace: nginx-ingress
        definition:
          metadata:
            annotations:
              service.beta.kubernetes.io/do-loadbalancer-name: sln-prod-k8s-lb
        merge_type: merge
      ignore_errors: true
      register: lb_annotation_result
      tags: nginx_ingress

    - name: Display load balancer annotation result
      debug:
        msg: |
          Load balancer annotation result: {{ 'SUCCESS' if lb_annotation_result.failed == false else 'SKIPPED - Load balancer name already exists' }}
      tags: nginx_ingress

    # Step 5: Setup Vault and External Secrets
    - name: Apply Vault configuration
      kubernetes.core.k8s:
        src: "{{ playbook_dir }}/secrets-management/vault-config.yaml"
        state: present
        wait: true
      tags: secrets_management

    - name: Wait for Vault to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: vault
        label_selectors:
          - app.kubernetes.io/name=vault
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 300
      tags: secrets_management

    - name: Setup Vault authentication and policies
      shell: |
        {{ playbook_dir }}/secrets-management/setup-vault.sh
      register: vault_setup_result
      changed_when: true
      tags: secrets_management

    - name: Display Vault setup result
      debug:
        var: vault_setup_result.stdout_lines
      tags: secrets_management

    - name: Apply Vault UI ingress
      kubernetes.core.k8s:
        src: "{{ playbook_dir }}/secrets-management/vault-ingress.yaml"
        state: present
        wait: true
      tags: secrets_management

    # Step 6: Setup ingress & certificates
    - name: Check if certificate issuer directory exists
      stat:
        path: "{{ playbook_dir }}/ingress/issuer"
      register: issuer_dir
      tags: ingress

    - name: Apply certificate issuers
      kubernetes.core.k8s:
        src: "{{ item }}"
        state: present
        wait: true
      with_fileglob:
        - "{{ playbook_dir }}/ingress/issuer/*.yaml"
      when: issuer_dir.stat.exists
      tags: ingress

    # Monitoring stack setup
    - name: Check if monitoring values file exists
      stat:
        path: "{{ playbook_dir }}/monitoring/values_sln.yaml"
      register: monitoring_values_file
      tags: monitoring

    - name: Install Grafana monitoring stack
      kubernetes.core.helm:
        name: grafana-stack
        chart_ref: prometheus-community/kube-prometheus-stack
        release_namespace: metrics
        create_namespace: true
        values_files:
          - "{{ playbook_dir }}/monitoring/values_sln.yaml"
        wait: true
        wait_timeout: 900s
      when: monitoring_values_file.stat.exists
      tags: monitoring

    - name: Check if Loki values file exists
      stat:
        path: "{{ playbook_dir }}/monitoring/loki/values.yaml"
      register: loki_values_file
      tags: monitoring

    - name: Install Loki stack
      kubernetes.core.helm:
        name: loki-stack
        chart_ref: bitnami/grafana-loki
        release_namespace: metrics
        create_namespace: true
        values_files:
          - "{{ playbook_dir }}/monitoring/loki/values.yaml"
        wait: true
        wait_timeout: 600s
      when: loki_values_file.stat.exists
      tags: monitoring

    - name: Check if Uptime Kuma values file exists
      stat:
        path: "{{ playbook_dir }}/monitoring/kuma/values.yaml"
      register: kuma_values_file
      tags: monitoring

    - name: Install Uptime Kuma
      kubernetes.core.helm:
        name: sln-uptime-kuma
        chart_ref: uptime-kuma/uptime-kuma
        release_namespace: monitoring
        create_namespace: true
        values_files:
          - "{{ playbook_dir }}/monitoring/kuma/values.yaml"
        wait: true
      when: kuma_values_file.stat.exists
      tags: monitoring

  post_tasks:
    - name: Wait for certificates to be ready
      kubernetes.core.k8s_info:
        api_version: cert-manager.io/v1
        kind: Certificate
        name: spacelaunchnow.app
        namespace: default
      register: cert_status
      until: >
        cert_status.resources | length > 0 and
        cert_status.resources[0].status.conditions is defined and
        (cert_status.resources[0].status.conditions | selectattr('type', 'equalto', 'Ready') | selectattr('status', 'equalto', 'True') | list | length > 0)
      retries: 20
      delay: 30
      ignore_errors: true
      tags: certificates

    # Step 7: Deploy ArgoCD Applications
    - name: Wait for ArgoCD server to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: argocd-server
        namespace: argocd
      register: argocd_status
      until: >
        argocd_status.resources | length > 0 and
        argocd_status.resources[0].status.readyReplicas is defined and
        argocd_status.resources[0].status.readyReplicas > 0
      retries: 30
      delay: 10
      tags: argocd

    - name: Deploy SpaceLaunchNow ArgoCD Project
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: AppProject
          metadata:
            name: spacelaunchnow
            namespace: argocd
          spec:
            description: SpaceLaunchNow Project
            sourceRepos:
              - 'https://github.com/TheSpaceDevs/SpaceLaunchNow-Server'
            destinations:
              - namespace: sln-dev
                server: https://kubernetes.default.svc
              - namespace: sln-prod
                server: https://kubernetes.default.svc
              - namespace: argocd
                server: https://kubernetes.default.svc
              - namespace: vault
                server: https://kubernetes.default.svc
              - namespace: external-secrets-system
                server: https://kubernetes.default.svc
            clusterResourceWhitelist:
              - group: ''
                kind: Namespace
              - group: 'rbac.authorization.k8s.io'
                kind: ClusterRole
              - group: 'rbac.authorization.k8s.io'
                kind: ClusterRoleBinding
            namespaceResourceWhitelist:
              - group: ''
                kind: '*'
              - group: 'apps'
                kind: '*'
              - group: 'networking.k8s.io'
                kind: '*'
              - group: 'external-secrets.io'
                kind: '*'
              - group: 'cert-manager.io'
                kind: '*'
              - group: 'autoscaling'
                kind: '*'
              - group: 'policy'
                kind: '*'
              - group: 'batch'
                kind: '*'
            roles:
              - name: admin
                description: Full access to SpaceLaunchNow applications
                policies:
                  - p, proj:spacelaunchnow:admin, applications, *, spacelaunchnow/*, allow
                  - p, proj:spacelaunchnow:admin, repositories, *, *, allow
                groups:
                  - spacelaunchnow:admin
              - name: developer
                description: Read and sync access to SpaceLaunchNow applications
                policies:
                  - p, proj:spacelaunchnow:developer, applications, get, spacelaunchnow/*, allow
                  - p, proj:spacelaunchnow:developer, applications, sync, spacelaunchnow/*, allow
                groups:
                  - spacelaunchnow:developer
      tags: argocd

    - name: Deploy App-of-Apps for SpaceLaunchNow
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: sln-app-of-apps
            namespace: argocd
            finalizers:
              - resources-finalizer.argocd.argoproj.io
          spec:
            project: spacelaunchnow
            source:
              repoURL: https://github.com/TheSpaceDevs/SpaceLaunchNow-Server
              targetRevision: HEAD
              path: manifests/argocd/applications
            destination:
              server: https://kubernetes.default.svc
              namespace: argocd
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=true
              retry:
                limit: 5
                backoff:
                  duration: 5s
                  factor: 2
                  maxDuration: 3m
            revisionHistoryLimit: 10
      tags: argocd

    - name: Display deployment summary
      debug:
        msg: |
          ============================================
          SLN Kubernetes Deployment Complete!
          ============================================
          
          Deployed components:
          - cert-manager: {{ 'cert-manager' in ansible_run_tags or 'all' in ansible_run_tags }}
          - nginx-ingress: {{ 'nginx_ingress' in ansible_run_tags or 'all' in ansible_run_tags }}
          - memcached: {{ 'memcached' in ansible_run_tags or 'all' in ansible_run_tags }}
          - Ingress/Certificates: {{ 'ingress' in ansible_run_tags or 'all' in ansible_run_tags }}
          - Monitoring stack: {{ 'monitoring' in ansible_run_tags or 'all' in ansible_run_tags }}
          - Vault: {{ 'vault' in ansible_run_tags or 'all' in ansible_run_tags }}
          - External Secrets: {{ 'external-secrets' in ansible_run_tags or 'all' in ansible_run_tags }}
          - ArgoCD: {{ 'argocd' in ansible_run_tags or 'all' in ansible_run_tags }}
          
          Release name: {{ release_name | default('sln-prod') }}
          Namespace: {{ staging_namespace | default('sln-prod') }}
          
          Next steps:
          1. Store Cloudflare token in Vault: cd secrets-management && ./store-cloudflare-token.sh
          2. Apply External Secrets config: kubectl apply -f secrets-management/external-secrets-config.yaml
          3. Check certificate status: kubectl describe certificate spacelaunchnow.app
          4. Verify pods are running: kubectl get pods --all-namespaces
          5. Access Vault UI: kubectl apply -f secrets-management/vault-ingress.yaml
          6. Access ArgoCD UI: https://argo.spacelaunchnow.app (admin/check ArgoCD secret for password)
          7. Deploy GitOps manifests: cd ../manifests && kubectl apply -f argocd/projects/spacelaunchnow.yaml
      tags: always
