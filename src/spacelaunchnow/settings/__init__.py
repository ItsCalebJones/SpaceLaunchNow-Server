"""
Django settings for spacelaunchnow project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys

from api.custom_storages import DEFAULT_STORAGE
from environs import Env

env = Env()
env.read_env()

BASE_DIR = os.path.abspath(os.path.dirname(__name__))

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", False)
DEBUG_LOGGING = env.str("DEBUG_LOGGING", None)
LOGLEVEL = "DEBUG" if DEBUG_LOGGING else "INFO"

if "test" in sys.argv:
    TESTING = True
else:
    TESTING = False

if DEBUG:
    ALLOWED_HOSTS = ["*"]
else:
    ALLOWED_HOSTS = ["*"]

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "spacelaunchnow.pagination.SLNLimitOffsetPagination",
    "DEFAULT_MODEL_SERIALIZER_CLASS": "rest_framework.serializers.ModelSerializer",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_THROTTLE_CLASSES": ("api.throttle.RoleBasedUserRateThrottle",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Launch Library",
    "DESCRIPTION": "The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events. "
    "\n\nWhile this API is free to use it is subject to rate limiting for non-authenticated requests."
    "\n\nPlease use https://lldev.thespacedevs.com for development testing"
    " - the development endpoint has stale data but is not subject to any rate limits."
    "\n\nIf you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.",
    "SERVE_INCLUDE_SCHEMA": False,
    "SCHEMA_PATH_PREFIX": "/api/ll/[0-9].[0-9].[0.9]",
    "CONTACT": {"name": "The Space Devs", "email": "support@thespacedevs.com"},
    "LICENSE": {"name": "Apache License 2.0"},
    "VERSION": None,
}

DISABLE_THROTTLE = env.bool("DISABLE_THROTTLE", False)

if DEBUG:
    DISABLE_THROTTLE = True

LOGIN_REDIRECT_URL = "/"

if DEBUG:
    import logging

    l = logging.getLogger(__name__)
    l.setLevel(logging.DEBUG)
    l.addHandler(logging.StreamHandler())

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            "datefmt": "%m-%d-%Y %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "standard",
        },
    },
    "loggers": {
        "": {"handlers": ["console"], "level": LOGLEVEL, "propogate": True},
        "django": {
            "handlers": ["console"],
            "level": LOGLEVEL,
            "propagate": True,
        },
    },
}

CELERY_IMPORTS = ("bot.tasks", "autoscaler.tasks", "api.tasks")

# Application definition
INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.sitemaps",
    "django.contrib.humanize",
    "rest_framework",
    "api",
    "bot",
    "web",
    "autoscaler",
    "configurations",
    "embed_video",
    "jet.dashboard",
    "jet",
    "django.contrib.admin",
    "django_user_agents",
    "django_filters",
    "django_jenkins",
    "rest_framework.authtoken",
    "storages",
    "collectfast",
    "robots",
    "app",
    "sorl.thumbnail",
    "sorl_thumbnail_serializer",
    "mathfilters",
    "django_tables2",
    "bootstrap4",
    "django_extensions",
    "tz_detect",
    "corsheaders",
    "cachalot",
    "drf_spectacular",
    "debug_toolbar",
    "django_cleanup.apps.CleanupConfig",
    "health_check",  # required
    "health_check.db",  # stock Django health checkers
    "health_check.cache",
    "health_check.storage",
    "health_check.contrib.migrations",
]

if not TESTING:
    INSTALLED_APPS.append("health_check.contrib.s3boto3_storage")

if DEBUG:
    # INSTALLED_APPS.append('debug_toolbar')
    pass

JET_THEMES = [
    {
        "theme": "default",  # theme folder name
        "color": "#47bac1",  # color of the theme's button in user menu
        "title": "Default",  # theme title
    },
    {"theme": "green", "color": "#44b78b", "title": "Green"},
    {"theme": "light-green", "color": "#2faa60", "title": "Light Green"},
    {"theme": "light-violet", "color": "#a464c4", "title": "Light Violet"},
    {"theme": "light-blue", "color": "#5EADDE", "title": "Light Blue"},
    {"theme": "light-gray", "color": "#222", "title": "Light Gray"},
]

SITE_ID = 1

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "tz_detect.middleware.TimezoneMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django_user_agents.middleware.UserAgentMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',
    # 'silk.middleware.SilkyMiddleware',
]

X_FRAME_OPTIONS = "SAMEORIGIN"

CORS_ORIGIN_ALLOW_ALL = True

SILKY_PYTHON_PROFILER = True

GEOIP_DATABASE = "GeoLiteCity.dat"

GEOIPV6_DATABASE = "GeoLiteCityv6.dat"

ROOT_URLCONF = "spacelaunchnow.urls"

JET_MODULE_GOOGLE_ANALYTICS_CLIENT_SECRETS_FILE = os.path.join(BASE_DIR, "client_secrets.json")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR + "/templates/"],
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.request",
                "django.contrib.messages.context_processors.messages",
                "spacelaunchnow.context_processor.ga_tracking_id",
                "spacelaunchnow.context_processor.use_google_analytics",
            ],
            "loaders": [
                (
                    "django.template.loaders.cached.Loader",
                    [
                        "django.template.loaders.filesystem.Loader",
                        "django.template.loaders.app_directories.Loader",
                    ],
                ),
            ],
        },
    },
]

USE_GA = not DEBUG

WSGI_APPLICATION = "spacelaunchnow.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": env.str("DATABASE_ENGINE"),
        "NAME": env.str("DATABASE_NAME"),
        "USER": env.str("DATABASE_USERNAME"),
        "PASSWORD": env.str("DATABASE_PASSWORD"),
        "HOST": env.str("DATABASE_HOST"),
        "PORT": env.str("DATABASE_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

# Needed for Debug Toolbar only - don't remove
LOCAL_IP = "127.0.0.1"
INTERNAL_IPS = [
    LOCAL_IP,
]

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True


USE_TZ = True

DISCORD_WEBHOOK = env.str("WEBHOOK_URL", None)

# GOOGLE KEYS
GA_TRACKING_ID = env.str("GOOGLE_ANALYTICS_TRACKING_ID", None)
GOOGLE_API_KEY = env.str("GOOGLE_API_KEY", None)

# Name of cache backend to cache user agents. If it not specified default
# cache alias will be used. Set to `None` to disable caching.
USER_AGENTS_CACHE = None

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env.str("EMAIL_HOST", None)
EMAIL_PORT = env.str("EMAIL_PORT", None)
EMAIL_HOST_USER = env.str("EMAIL_HOST_USER", None)
EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD", None)
EMAIL_USE_TLS = env.str("EMAIL_HOST_TLS", None)
DEFAULT_FROM_EMAIL = env.str("EMAIL_FROM_EMAIL", None)

# If not using CloudFront, leave None in config.
CLOUDFRONT_DOMAIN = env.str("CLOUDFRONT_DOMAIN", None)
CLOUDFRONT_ID = env.str("CLOUDFRONT_ID", None)

USE_LOCAL_STORAGE = env.bool("USE_LOCAL_STORAGE", False)

if USE_LOCAL_STORAGE:
    # Local storage settings
    DOMAIN = f"{LOCAL_IP}:8000"
    DEFAULT_FILE_STORAGE = "django.core.files.storage.FileSystemStorage"
    STATIC_URL = "/static/"
    STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
else:
    AWS_QUERYSTRING_AUTH = False
    AWS_STORAGE_BUCKET_NAME = env.str("STORAGE_BUCKET_NAME", None)
    AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID", None)
    AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY", None)
    AWS_S3_ENDPOINT_URL = env.str("AWS_S3_ENDPOINT_URL", None)
    AWS_DEFAULT_ACL = "public-read"
    AWS_S3_URL_PROTOCOL = "https"
    AWS_LOCATION = "static/home"
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",
    }
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.nyc3.digitaloceanspaces.com"
    DEFAULT_FILE_STORAGE = DEFAULT_STORAGE
    # Static URL always ends in /
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/"
    MEDIA_LOCATION = "media"
    PROJECT_PATH = os.path.abspath(os.path.dirname(__name__))
    STATICFILES_DIRS = [os.path.join(PROJECT_PATH, "static")]
    STATICFILES_LOCATION = "static/home"
    STATICFILES_STORAGE = "custom_storages.StaticStorage"
    AWS_PRELOAD_METADATA = True
    APP_IMAGE_LOCATION = MEDIA_LOCATION + "/app_images"  # type: str
    APP_IMAGE_STORAGE = "custom_storages.AppImageStorage"


if env.str("CACHE_BACKEND", None) and env.str("CACHE_LOCATION", None):
    CACHES = {
        "default": {
            "BACKEND": env.str("CACHE_BACKEND", None),
            "LOCATION": env.str("CACHE_LOCATION", None),
        }
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }

CACHALOT_TIMEOUT = 60

IS_API = env.bool("IS_API", True)
IS_WEBSERVER = env.bool("IS_WEBSERVER", True)
IS_ADMIN = env.bool("IS_ADMIN", True)
IS_SLN = env.bool("IS_SLN", True)
IS_LL = env.bool("IS_LL", False)


# FCM SETTINGS
FCM_KEY = env.str("FCM_KEY", None)

# DigitalOcean SETTINGS
DO_CLUSTER_ID = env.str("DO_CLUSTER_ID", None)
DO_TOKEN = env.str("DO_TOKEN", None)
